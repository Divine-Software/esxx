<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY ajax "<acronym>AJAX</acronym>">
<!ENTITY css  "<acronym>CSS</acronym>">
<!ENTITY es   "<acronym>ECMAscript</acronym>">
<!ENTITY esxx "<acronym>ESXX</acronym>">
<!ENTITY html "<acronym>HTML</acronym>">
<!ENTITY ldap "<acronym>LDAP</acronym>">
<!ENTITY j2se "<acronym>J2SE</acronym>">
<!ENTITY sql  "<acronym>SQL</acronym>">
<!ENTITY xml  "<acronym>XML</acronym>">
<!ENTITY xslt "<acronym>XSLT</acronym>">
]>

<article>
  <title>Introducing &esxx;</title>
<!--  <subtitle>The friendly Web/XML Application Server</subtitle>-->
  <articleinfo>
    <author>
      <firstname>Martin</firstname>
      <surname>Blom</surname>
    </author>
    <abstract>
      <para>&esxx; is a free, easy-to-install, easy-to-use, no-nonsense
&es; application server, incorporating familar technologies such as
&xml;, &xslt;, &sql;, &ldap; and Java into one single package.</para>
    </abstract>

    <keywordset>
      <keyword>ECMAScript</keyword>
      <keyword>LDAP</keyword>
      <keyword>SQL</keyword>
      <keyword>XML Application Server</keyword>
      <keyword>XML</keyword>
      <keyword>XSLT</keyword>
      <keyword>Java</keyword>
      <keyword>JavaScript</keyword>
      <keyword>Web Application Server</keyword>
    </keywordset>
    
  </articleinfo>
  
  <section>
    <title>Introduction</title>
    
    <para>In the late 90's, I was involved in the development of a a
Web/&xml; application server. During that time, we realized the benefits
of using data-driven programming for server-based web applications. In
this context, data-driven programming means that the data, that is to be
returned as response to a request, is generated and then gradually
refined until it reaches the user, most often in the form of an
<acronym>(X)HTML</acronym> page, using plain &xml; as intermediate
formats.</para>

    <para>By focusing solely on <emphasis>what</emphasis> to present to
the user in the logic stage and not <emphasis>how</emphasis>, the
programmer can focus on what he or she is good at, and leave
presentation and graphical design to those who knows
better<footnote>
	<para>In the current &ajax;-crazy world, this methodology works
even better than it used to, </para>
      </footnote>.</para>

    <para>Six years later, after a period of not being involved with
anything web related at all, I find that people are
<emphasis>still</emphasis> mixing &html; and server-side code on a
regular basis.</para>

    <para>Additionally, when looking around for a free, easy-to-use tool
to drive a site I was planning, I found nothing that I liked. So, I
decided to roll my own: &esxx;.</para>

    <para>&esxx; is pronounced <quote>Essex</quote> and was originally
an acronym for <quote>&es;, &xml; and &xslt;</quote>.</para>
  </section>

  <section>
    <title>System requirements &amp; license</title>

    <para>&esxx; is written in Java and requires &j2se;
6.0 and a web server. Apart from that, all extra Java packages are
included in the &esxx; <acronym>JAR</acronym> file.</para>

    <para>&esxx; is a <application>FastCGI</application> appliaction, so
if you're using <application>Apache</application>, make sure it's
configured with <application>mod_fastcgi</application> enabled.</para>

    <para>&esxx; is licensed under GPL version 2. It includes software
components that use BSD-like licenses
(<application>HtmlCleaner</application> and
<application>JFast</application>). Closed-source licensing is possible;
contact <email>martin@blom.org</email> for details.</para>
  </section>

  <section>
    <title>Theory of operation</title>

    <para>In order to understand how &esxx; applications are meant to
work, the following example might be of interest.</para>
    
    <orderedlist>
      <listitem>
	<para>A client performs a request to an &esxx; application.</para>
      </listitem>

      <listitem>
	<para>If the application is not yet in memory, it is loaded, all
&es; code is compiled and all request handlers and &xslt; stylesheets
are registered. The application is started by executing the &es;
code. Typically, that will create and initialize an application object
that will later handle all client requests.</para>

	<para>If the application was already running, this step does
nothing, unless one of the source files were modified, in which case the
application is restarted.</para>
      </listitem>

      <listitem>
	<para>The appropriate request handler is invoked. Request
handlers can be registered for <acronym>HTTP</acronym> requests like
<command>GET</command>, <command>PUT</command>, <command>POST</command>,
<command>DELETE</command> etc. and <acronym>SOAP</acronym>
actions.</para>
      </listitem>

      <listitem>
	<para>The handler processes the request and returns a
result. Typically, this is an &xml; document maked as
<literal>text/xml</literal>, but raw byte data and image results are
also possible.</para>

	<para>The document returned in this step typically includes all
information that should be transmitted to the client, but the actual
&xml; format is unspecified.</para>

	<para>It's also possible to control the next step by selecting a
different <acronym>MIME</acronym> type for the result.</para>
      </listitem>

      <listitem>
	<para>Based on the result's <acronym>MIME</acronym> type, an
appropriate &xslt; stylesheet is selected and used to transform the
result into the appropriate data format.</para>

	<para>Typically, the stylesheet will transform the &xml; data
into an unstyled &html; document.</para>

	<para>The &xslt; stylesheet has access to the &es; environment
and it's possible to use custom &xslt; extension elements implemented in
&es;. For example, a web page stylesheet could invoke &es; code to
insert targeted advertisement or other <quote>extras</quote>, not
really related to the application logic.</para>

	<para>It is also the stylesheet that sets the final
<acronym>MIME</acronym> type that is to be presented to the
client.</para>
      </listitem>

      <listitem>
	<para>The client receives the data and if the client was a
actually a web browser, applies futher processing using &xslt;, &css;
and client-side &es; and presents the result to the user.</para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>The <classname>URI</classname> class</title>

    <para></para>

    <section>
      <title>The <methodname>load</methodname>() method</title>

      <para></para>
    </section>

  </section>

  <section>
    <title><acronym>MIME</acronym> type parsers</title>


    <section>
      <title><literal>application/octet-stream</literal></title>

      <para>The <literal>application/octet-stream</literal> parser loads
a resource as-is into a Java <classname>ByteBuffer</classname>
object.</para>
    </section>

    <section>
      <title><literal>application/xslt+xml</literal></title>

      <para>The <literal>application/xslt+xml</literal> parser loads and
compiles an &xslt; style-sheet into an &es;
<classname>XSLTProcessor</classname> object.</para>
    </section>

    <section>
      <title><literal>image/*</literal></title>

      <para>The <literal>image</literal> class of parses loads the
specified resource as a Java <classname>BufferedImage</classname>
object. The file types supported by &j2se; 6.0 are:
<literal>image/bmp</literal>, <literal>image/gif</literal>,
<literal>image/jpeg</literal>, <literal>image/png</literal> and ,
<literal>image/wbmp</literal>. Use <literal>image/*</literal> to
automatically identify the image type.</para>

      <para>When specifying a specific image type, the unofficial
<parameter>x-index</parameter> parameter can be used to specify the
index of the image, in case the file contains multiple images.</para>
    </section>

    <section>
      <title><literal>text/html</literal></title>
	
      <para>The <literal>text/html</literal> parser loads the resource
as an &html; file, using the &html; parser <citation><xref
linkend="htmlcleaner"/></citation>, to transform the document into
well-formed &xml;.  The <parameter>charset</parameter> parameter can be
used to specify the character set to be used. The result is an
<classname>XML</classname> object.</para>
    </section>

    <section>
      <title><literal>text/plain</literal></title>
	
      <para>The <literal>text/plain</literal> parser loads the resource
as a plain <classname>String</classname>. The
<parameter>charset</parameter> parameter can be used to specify the
character set to be used.</para>
    </section>

    <section>
      <title><literal>text/xml</literal></title>
	
      <para>The <literal>text/xml</literal> parser loads the resource as
an &es; <classname>XML</classname> object. The document must be
well-formed and if it has a <sgmltag class="element">DOCTYPE</sgmltag>,
external entities will be included as well.</para>
    </section>

    <section>
      <title><literal>text/x-sql</literal></title>

      <para><literal>text/x-sql</literal> is not supported as a
parser. In &esxx;, it's only as query type for <uri>jdbc:</uri>
URIs.</para>
    </section>

  </section>

  <bibliography>
    <title>References</title>

    <biblioentry id="htmlcleaner">
      <abbrev id="htmlcleaner.abbrev">HtmlCleaner</abbrev>
      <title><ulink url="http://htmlcleaner.sourceforge.net/">The <application>HtmlCleaner</application> project page</ulink></title>
    </biblioentry>
  </bibliography>
</article>
